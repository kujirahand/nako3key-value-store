# === なでしこ3API / Key-Valueストア
# 各種設定
アプリタイトル＝「なでしこ3簡単保存API」
DB保存フォルダ＝「{母艦パス}/db」
メインDB=「{DB保存フォルダ}/db1.sqlite3」
最大キー=2000 # 保存可能なキーの数を定義
最大値文字数=1024*1024*3。#3MB以上のデータは保存できない
初期化SQL＝『
CREATE TABLE IF NOT EXISTS items (
  id      INTEGER PRIMARY KEY,
  key	  TEXT NOT NULL,
  value TEXT DEFAULT '',
  password TEXT DEFAULT '',
  ctime INTEGER DEFAULT 0,
  mtime INTEGER DEFAULT 0
);
CREATE UNIQUE INDEX items_key_index ON items (key);
』
ADMIN_PAGE=「admin.php」
初期設定実行。

# パラメータ取得
「mode」を「」でGET取得してMODEに代入。
「key」を「」でGET取得してKEYに代入。
「value」を「」でGET取得してVALUEに代入。
「password」を「」でGET取得してPWに代入。

# 値チェック
もし、(KEYの文字数) > 1024ならば
　　「keyの文字数が1024を超えています。」とエラー表示。終わり。
ここまで。
もし、(VALUEの文字数) > 最大値文字数ならば
　　「valueの文字数が{最大値文字数}を超えています。」とエラー表示。終わり。
ここまで。

# MODEで分岐
もし、MODE=「create」ならば
　　作成処理。
違えば、もし、MODE=「get」ならば
　　取得処理。
違えば、もし、MODE=「set」ならば
　　設定処理。
違えば
　　トップ画面。
ここまで。

●トップ画面とは
　　情報＝統計情報取得。
    「管理画面 - {アプリタイトル}」と「
<h2>[1] 新規キーを作成しよう</h2>
<div class="info">
簡単保存APIを使うと、任意のキーを指定してデータを簡単にサーバーに保存できます。最初に任意の名前の【キー】を作成しましょう。作成に際してパスワードが必要です。パスワードは忘れないようにどこかにメモしておきましょう。
</div>
<div class="tool">
<form action="{ADMIN_PAGE}" method="GET">
<input type="hidden" name="mode" value="create">
<p><label>キー:<br><input type="text" name="key" value="test"><label></p>
<p><label>初期値:<br><input type="text" name="value" value="hoge"></label></p>
<p><label>パスワード(省略不可):<br><input type="password" name="password" value=""></label></p>
<p><input type="submit" value="作成"></p>
</form>
</div>

<h2>[2] キーの値を確認してみよう</h2>
<div class="info">
上記で作成した【キー】が正しく作成できるか確認してみましょう。
</div>
<div class="tool">
<form action="{ADMIN_PAGE}" method="GET">
<input type="hidden" name="mode" value="get">
<p><label>キー:<br><input type="text" name="key" value="test"><label></p>
<p><label>パスワード:<br><input type="password" name="password" value="abcd"></label></p>
<p><input type="submit" value="検索"></p>
</form>
</div>

<h2>[3] APIを使ったプログラムを作ろう</h2>

<div class="tool">
  <a href="https://nadesiko.net/index.php?nako3kvs">→プログラムの説明を見る</a>
</div>

<h2>[おまけ] - キーの値を変更しよう</h2>
<div class="tool">
<form action="{ADMIN_PAGE}" method="GET">
<input type="hidden" name="mode" value="set">
<p><label>キー:<br><input type="text" name="key" value="test"><label></p>
<p><label>値:<br><input type="text" name="value" value="test"><label></p>
<p><label>パスワード:<br><input type="password" name="password" value=""></label></p>
<p><input type="submit" value="更新"></p>
</form>
</div>

<h2>情報</h2>
<div class="info">{情報}</div>
」で画面表示。
ここまで。

●統計情報取得とは
　　『SELECT count(key) FROM items』を[]でPDO一行取得。
　　V=それ["count(key)"]。
　　それは「現在までに、{V}個のデータが保存されています。」
ここまで。

●作成処理とは
　　# パラメータ確認
　　もし、PW=「」またはKEY=「」ならば
　　　　「keyとpasswordが必要です」とエラー表示。終わり。
　　ここまで。
　　PWハッシュ＝（PWのPWハッシュ取得）。
　　『SELECT * FROM items WHERE key=?』を[KEY]でPDO一行取得。
　　もし、それならば
　　　　「既にkeyが存在しています。」とエラー表示。終わる。
　　ここまで。
　　# 生成
　　T=システム時間。
　　『INSERT INTO items (key,value,password,ctime,mtime) VALUES (?,?,?,?,?)』を[KEY, VALUE, PWハッシュ,T, T]でPDO実行。
　　「キー:{KEY}」と「作成完了。<a href="{ADMIN_PAGE}">→戻る</a>」で画面表示。
ここまで。

●取得処理とは
　　# パラメータ確認
　　もし、PW=「」またはKEY=「」ならば
　　　　「keyとpasswordが必要です」とエラー表示。終わり。
　　ここまで。
　　PWH＝（PWのPWハッシュ取得）。
　　『SELECT * FROM items WHERE key=? AND password=?』を[KEY,PWH]でPDO一行取得。
　　もし、それならば
　　　　VALUE=それ@"value"
　　　　「
            <div>
            	<div>{KEY}の値:</div>
            	<div class="vcode"><code>[[CODE]]</code></div>
            </div>
            <div><br><a href="{ADMIN_PAGE}">→戻る</a></div>
             」に{"CODE":VALUE,"KEY":KEY}をHTML埋め込みしてMSGに代入。
　　　　「キー『{KEY}』の値」とMSGで画面表示。
　　違えば
　　　　「見つかりません。」とエラー表示。
　　ここまで。
ここまで。

●設定処理とは
　　# パラメータ確認
　　もし、PW=「」またはKEY=「」ならば
　　　　「keyとpasswordが必要です」とエラー表示。終わり。
　　ここまで。
　　PWH＝（PWのPWハッシュ取得）。
　　『SELECT * FROM items WHERE key=? AND password=?』を[KEY,PWH]でPDO一行取得。
　　もし、それならば
　　　　T=システム時間。
　　　　CNT=『UPDATE items SET value=?,mtime=? WHERE key=? AND password=?』を[VALUE,T,KEY,PWH]でPDO実行。
　　　　もし、CNT≧1ならば
　　　　　　「値の更新完了: {KEY}」と「<a href="{ADMIN_PAGE}">更新完了。戻る</a>」で画面表示。
　　　　違えば
　　　　　　「更新できません。」とエラー表示。終わり。
　　　　ここまで。
　　違えば
　　　　「見つかりません。」とエラー表示。終わり。
　　ここまで。
ここまで。

●(PWの)PWハッシュ取得とは
　　パスワードSALT＝「NlHRYARkyJyofR3F」
　　(PW&パスワードSALT)を「sha256」の「base64」でハッシュ値計算。
ここまで。

●初期設定実行とは
　　F=メインDBが存在
　　「sqlite:{メインDB}」のPDO生成。
　　もし、F＝いいえならば
　　　　初期化SQLを[]でPDO実行。
　　ここまで。
ここまで。


●(Sの|Sを|Sと)エラー表示とは
　　「{"エラー"のHTMLヘッダ取得}
<h1 class="error">エラー</h1>
<div class="box-error">
[[エラー]]
</div>
{HTMLフッタ取得}」に、{
  "エラー":S,
   "アプリタイトル":アプリタイトル
 }をHTML埋め込みして表示。
ここまで。

●(TITLEとMSGで)画面表示とは
　　「{TITLEのHTMLヘッダ取得}
<h1>[[タイトル]]</h1>
<div class="box">
[[メッセージ|raw]]
</div>
{HTMLフッタ取得}」に、{
  "タイトル":TITLE, 
   "メッセージ":MSG,
   "アプリタイトル":アプリタイトル
 }をHTML埋め込みして表示。
ここまで。

●(タイトルの)HTMLヘッダ取得とは
それは「
<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>{タイトル} - {アプリタイトル}</title>
  <link href="./res/admin.css" rel="stylesheet">
</head>
<body>
<div id="menubar">
    <a href="https://nadesiko.net/">なでしこ3サーバーAPI</a>
    &gt;
    <a href="https://nadesiko.net/index.php?nako3kvs">簡単保存API(nako3kvs)</a>
    &gt;
    <a href="{ADMIN_PAGE}">管理画面</a>
</div><!-- menubar -->
」
ここまで。

●HTMLフッタ取得とは
それは「
<!-- footer -->
<div id="footer">
    <a href="https://nadesiko.net/">なでしこ3/サーバーAPI</a>
    &gt;
    <a href="https://nadesiko.net/index.php?nako3kvs">簡単保存API</a>
    &gt;
    <a href="{ADMIN_PAGE}">管理画面</a>
</div>
</body>
</html>」
ここまで。


